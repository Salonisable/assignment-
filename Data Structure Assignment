Q.1 Create a structure Student ( rollno, name), Create a structure variable and Access the members using structure variable.
#include<stdio.h>
#include<conio.h>
#include<string.h>

struct student
{
	int rollno;
	char name[20];
};

main()
{
	struct student s1,s2,s3,s4,s5;
	
	s1.rollno=1;
	s2.rollno=2;
	s3.rollno=3;
	s4.rollno=4;
	s5.rollno=5;
	
	strcpy(s1.name,"saloni");
	strcpy(s2.name,"simran");
	strcpy(s3.name,"Riya");
	strcpy(s4.name,"priyanka");
	strcpy(s5.name,"celestina");
	
	printf("\nrollno of student 1 : %d\n name : %s\n",s1.rollno,s1.name);
	printf("\nrollno of student 2 : %d\n name : %s\n",s2.rollno,s2.name);
	printf("\nrollno of student 3 : %d\n name : %s\n",s3.rollno,s3.name);
	printf("\nrollno of student 4 : %d\n name : %s\n",s4.rollno,s4.name);
	printf("\nrollno of student 5 : %d\n name : %s\n",s5.rollno,s5.name);
	
}

======================================================================================================================================================================
Q.2 Create a structure pointer which can access the members of the structure Student and print member values.
#include<stdio.h>
#include<string.h>

  struct student
 {
 	int eid;
 	char name[30];
 	char city[20];
 	
 };
 
main()
{
 	  struct employee e[3];
 	  char nm[20];
 	  char cy[20];
	
	int i;
	for(i=0;i<3;i++)
	{
		printf("Enter id : ");
		scanf("%d",&e[i].eid);
		
		fflush(stdin);
		printf("Enter name : ");
		gets(nm);
		strcpy(e[i].name,nm);
		
		fflush(stdin);
		printf("Enter city : ");
		gets(nm);
		strcpy(e[i].city,cy);	
		
		for(i=0;i<3;i++)
		{
			printf("id : %d,name : %s,city : %s\n",e[i].eid,e[i].city);
		}
		
	}

	

	
	
	
}



======================================================================================================================================================================


Q.3 Create an array of structure which is used to store 3 employee records.
#include<stdio.h>
#include<conio.h>

struct employee
{
	int id;
	char name[30];
	char city[30];
};

int main()
{
	struct employee e[7];
	char nm[25];
	char cy[20];
	int i;
	for(i=0;i<3;i++)
	{
		printf("enter id : ");
		scanf("%d",&e[i].id);
		
		fflush(stdin);
		printf("enter name : ");
		gets(nm);
		strcpy(e[i].name,nm);
		
		fflush(stdin);
		printf("enter city : ");
		gets(cy);
		strcpy(e[i].city,cy);
		fflush(stdin);
	}
	
	for(i=0;i<3;i++)
	{
		printf("id : %d , name : %s , city : %s\n",e[i].id,e[i].name,e[i].city);
	}
}

======================================================================================================================================================================
Q.4 Create a float pointer which points to the float array and access all elements of array using float pointer
#include<stdio.h>

int main()
{
	int *p;
	
	p=(int*)malloc(sizeof(int));
	*p=400;
	
	printf("value : %d ",*p);
	
	free(p);
  
	
	
	
}
Q.5 Create an integer pointer for which memory is allocated dynamically.
#include<stdio.h>
#include<stdlib.h>

int main()
{
	int *p;
	
	p=(int*)malloc(sizeof(int));
	*p=400;
	
	printf("value : %d ",*p);
	
	free(p);
  
	
	
	
}
======================================================================================================================================================================
Q.6 Create a stack of 5 characters and display all elements.
#include<stdio.h>
#define SIZE 5

typedef struct stack
{
	int top;
	char elements[SIZE];
}stack;

void initialize(stack *sp)
{
	sp->top=-1;
}

void push(stack *sp,char item)
{
	if(sp->top==SIZE-1)
    printf("\nSTACK OVERFLOW");
    else
    sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
	int x;
	if(sp->top==-1)
	printf("\nSTACK UNDERFLOW");
	else
	x=sp->elements[sp->top--];
	return x;
}

void display(stack *sp)
{
	int i;
	for(i=0;i<=sp->top;i++)
	{
		printf("CHARACTERS ARE : %c\n",sp->elements[i]);
	}
}
int main()
{
    stack e;
	initialize(&e);
	push(&e,'a');
	push(&e,'b');
	push(&e,'c');
	push(&e,'d');
	push(&e,'f');
	
	display(&e);
		
}

======================================================================================================================================================================
Q.7 Create a stack of 5 names of employees and delete the last name and display it.
#include<stdio.h>
#include<stdlib.h>
#define SIZE 3

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}Aaa;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}Bbb;


void Ainitialize(Aaa *sp)
{
	sp->Atop=-1;
}
void Binitialize(Bbb *sp)
{
	sp->Btop=-1;
}

void Apush(Aaa *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(Bbb *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(Aaa *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(Bbb *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(Aaa*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(Bbb *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(Aaa *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(Bbb *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(Aaa *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%c ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(Bbb *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}


======================================================================================================================================================================
.8 Create two stacks A and B . A contains 3 alphabets and B contains 3 numbers. Display Both stacks.
#include<stdio.h>
#include<stdlib.h>
#define SIZE 3

typedef struct a_st
{
	int Atop;
	char Aelements[SIZE];	
}Aaa;
typedef struct b_st
{
	int Btop;
	int Belements[SIZE];	
}Bbb;


void Ainitialize(Aaa *sp)
{
	sp->Atop=-1;
}
void Binitialize(Bbb *sp)
{
	sp->Btop=-1;
}

void Apush(Aaa *sp,char item)
{
		if(A_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Aelements[++sp->Atop]=item;
}
void Bpush(Bbb *sp,int item)
{
		if(B_is_full(sp))	
			printf("\nStack overflow\n");
		else
			sp->Belements[++sp->Btop]=item;
}

int Apop(Aaa *sp)
{
	int x;
	if(A_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Aelements[sp->Atop--];
	return x;	
}
int Bpop(Bbb *sp)
{
	int x;
	if(B_is_empty(sp))
		printf("\nStack underflow");
	else
		x=sp->Belements[sp->Btop--];
	return x;	
}

int A_is_full(Aaa*sp)   
{
	if(sp->Atop == SIZE-1)      
		return 1;
	else
		return 0;
}
int B_is_full(Bbb *sp)   
{
	if(sp->Btop == SIZE-1)      
		return 1;
	else
		return 0;
}

int A_is_empty(Aaa *sp)   
{
	if(sp->Atop == -1)          
		return 1;
	else
		return 0;	
}
int B_is_empty(Bbb *sp)   
{
	if(sp->Btop == -1)          
		return 1;
	else
		return 0;	
}
void A_display(Aaa *sp)
{
	int i;
	
	for(i=sp->Atop;i!=-1;i--)
	{
		printf("%c ",sp->Aelements[i]);	
	}	
	printf("\n\n");
}

void B_display(Bbb *sp)
{
	int i;
	
	for(i=sp->Btop;i!=-1;i--)
	{
		printf("%d ",sp->Belements[i]);	
	}	
	printf("\n\n");
}


======================================================================================================================================================================
Q.9 Create a queue which contains 5 double values and print all values.
#include<stdio.h>
#define SIZE 5

typedef struct queue

{
int front;
int rear;
double elements[SIZE];

}queue;

void initialize(queue *sp)
{
sp->front=-1;
sp->rear=-1;
}

void add(queue *sp,double item)

{
if(sp->rear==SIZE-1)
printf("\nStack overflow");
else
{
if(sp->front == -1)
sp->front=0;
sp->elements[++sp->rear]=item;
}
}
int rem(queue *sp)
{
char x;
if(sp->front==-1)
printf("\nStack underflow");
else
x=sp->elements[sp->front++];
return x;
}
void display(queue *sp)
{
int i;
for(i=sp->front;i<=sp->rear;i++)
{
printf("Double values : %lf\n",sp->elements[i]);
}
}
int main()
{
queue e;
initialize(&e);
add(&e,10.234);
add(&e,11.234);
add(&e,12.234);
add(&e,13.234);
add(&e,14.234);
display(&e);
}
 

======================================================================================================================================================================
Q.10 Create a queue which contains 5 numbers and print the square value of every element of the queue.

======================================================================================================================================================================
Q.11 Create a stack which contains ASCII values for alphabets and print Alphabets.

======================================================================================================================================================================
Q.12 Take 10 numbers from user, Make two stacks as Even & Odd, Even stack contains even numbers , Odd stack contains odd numbers.
======================================================================================================================================================================
Q.13 Make a program to copy elements of one stack to another.
======================================================================================================================================================================
Q.14 Read 5 numbers from user and store it in a stack.
======================================================================================================================================================================
Q.15 Create a Link list of 5 nodes which stores information as a character.
======================================================================================================================================================================
Q.16 Write a program to count the number of nodes in the link list.
#include<stdio.h>
#include<stdlib.h>
//MULTIPLE NODES
typedef struct st
{
	int data;
	struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

void initialize(list *s)
{
	s->head = NULL;
	s->tail = NULL;
}

node* createnode(int x)
{
	node *sp;
	
	sp = (node*)malloc(sizeof(node));
	
	if(sp == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	sp->data = x;
	sp->next = NULL;
	
	return sp;
}

void insertAtail(list *s,int x)
{
	node *sp;
	
	sp=createnode(x);
	if(s->head==NULL)
	s->head=sp; 
	else
	s->tail->next=sp;
	s->tail=sp;
}

void traverse(list *s)
{
	node *p;
	
	p=s->head;
	
	while(p!=0)
	{
		printf("%d\n",p->data);
		p=p->next;
	}
}

int getnodes(list *s)
{
	node *p;
	
	int count=0;
	for(p=s->head;p!=NULL;p=p->next)
	{
		++count;
	}
	return count;
}
int main()
{
	list *s;
	
	s=(list*)malloc(sizeof(list));
	
	if(s == NULL)
	{
		printf("MEMORY UNAVAILABLE");
		exit(0);
	}
	
	initialize(s);
	
	insertAtail(s,100);
	insertAtail(s,200);
	insertAtail(s,300);
	
	traverse(s);
	
	int count = getnodes(s);
	
	printf("NO. OF NODES : %d",count);
}
    
======================================================================================================================================================================
Q.17 Create a Link list of 3 nodes containing 3 double values and print the average of 3 numbers.
#include<stdio.h>
#include<stdlib.h>

typedef struct nd             
{                           
    double data;
    struct nd *next;
}node;

typedef struct ls
{
	node *head,*tail;
}list;

node* createNode(double no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}

void initalize(list *p)
{
	p->head = NULL;
	p->tail = NULL;
}
void insertAtail(list *p,double x)
{
	node *np;
	np = createNode(x);
	if(p->head==NULL)
	p->head = np;
	else
	p->tail->next = np;
	p->tail = np;
}

void traverse(list *p)
{
    node *sp;
    sp = p->head;
    
    while(sp!=NULL)
    {
    	printf("%lf\n",sp->data);
    	sp=sp->next;	
    	
    	printf("\n");
	}
	sp=p->head;
	float sum=0;
	while(sp!=NULL)
	{
		sum=(sum+sp->data);
		sp=sp->next;
	}
	printf("\nSUM = %f",sum);
	float avg=0;
	avg=sum/3;
	printf("\nAVERAGE = %f",avg);
}

int main()
{    
    list *p;
    
    p = (list*) malloc(sizeof(list));
    
    if(p == NULL)
    {
    	printf("MEMORY UNVAVAILABLE");
    	exit(0);
	}
	
	initalize(p);
	insertAtail(p,12.357);
	insertAtail(p,14.2345);
	insertAtail(p,17.234);
	
	traverse(p);
	
	free(p);
    
}

======================================================================================================================================================================
Q.18 Create a Link list of 5 nodes and print it in reverse order.
======================================================================================================================================================================
Q.19 Create a Link list of 3 nodes and delete the head node.
======================================================================================================================================================================
Q.20 Create a list of 3 city names and Enter a city to be searched in the list .If city name exists in list then Display City Found.
======================================================================================================================================================================
Q.21 Create an array of 5 integer values and search an element in the array using Linear Search.
======================================================================================================================================================================
Q.22 Create an array of string and search a perticular string using Linear Search.
======================================================================================================================================================================
Q.23 Sort an array of 5 numbers using Insertion sort.
======================================================================================================================================================================
Q.24 Make a tree which contains 3 nodes. A is Root node, B is left child and C is right child.
#include<stdio.h>
#include<stdlib.h>


typedef struct tr
{
char data;
struct tr *left;
struct tr *right;
}tree;

 tree* createnode(char ch)
{
tree *n;
n=(tree*)malloc(sizeof(tree));
n->data=ch;
n->left=NULL;
n->right=NULL;
return n;
}

int main()
{
tree *root,*n1,*n2;
root = createnode('A');
n1=createnode('B');
n2=createnode('C');
root->left=n1;
root->right=n2;

printf("\t%c\n",root->data);
printf("%c\t",root->left->data);
printf("\t%c\n",root->right->data);

}
======================================================================================================================================================================
Q.25 Create a tree of 3 nodes where root node displays the value as "Color" , Left node of root shows value as "Red" and right node shows value as Green. 
 and print all node values in using preorder traversal.
=====================================================================================================================================================================
Q.26 Create a link list of 3 integers and print the elements of link list in reverse order using stack.
======================================================================================================================================================================
Q.27 Write a program to crate an adjacency matrix(3 by 3) using graph , where create edges (0,1),(1,2),(1,1), Store the student age information.
#include<stdio.h>


int main()
{
    int ad[3][3];
    
    int age;
    
    int i,j;
    
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(i==0 && j==1)
            {
                printf("Enter age : ");
                scanf("%d",&age);
                ad[i][j]=age;
            }
            
            else if(i==1 && j==1)
            {
                printf("Enter age : ");
                scanf("%d",&age);
                ad[i][j]=age;
            }
            
            else if(i==1 && j==2)
            {
                printf("Enter age : ");
                scanf("%d",&age);
                ad[i][j]=age;
            }
            
            else
            {
                ad[i][j]=0;
            }
        }
        
    }
    
    for(i=0;i<3;i++)
    {
        for(i=0;i<3;i++)
        {
            printf("%d\t",ad[i][j]);
        }
        
        printf("\n");
    }
}




======================================================================================================================================================================


