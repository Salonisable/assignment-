1. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Create a table maually.
   ANS. student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
==========================================================================

student_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
=============================================================================================================

student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 10:50:01 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="studentdetails">
        <id name="id" type="int">
            <column name="id" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="rollno" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="name" />
        </property>
        <property name="age" type="int">
            <column name="age" />
        </property>
    </class>
</hibernate-mapping>
   =========================================================================================================================================================================

2. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Table should be created by hibernate and the records in the table should be updated.
   ANS. student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
========================================================

studet_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	  student s3=new student();
		 
	  s3.setName("OM");
		 
	  s3.setAge(15);
		 
	  s3.setRollno(23);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 s.save(s3);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
==============================================================================

student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 11:16:04 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="ASSI2HB">
        <id name="id" type="int">
            <column name="ID" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="ROLLNO" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
        <property name="age" type="int">
            <column name="AGE" />
        </property>
    </class>
</hibernate-mapping>
=======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
      <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping  resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
   =========================================================================================================================================================================

3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.
Account class-
package org.servlets;



import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name ="Account")
public class Account {
	
	
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	@Column(name ="accno")
	private int accno;
	
	@Column(name ="accname")
	private String accname;
	
	@Column(name ="acctype")
	private String acctype;
	
	public int getAccno() {
		return accno;
	}
	public void setAccno(int accno) {
		this.accno = accno;
	}
	public String getAccname() {
		return accname;
	}
	public void setAccname(String accname) {
		this.accname = accname;
	}
	public String getAcctype() {
		return acctype;
	}
	public void setAcctype(String acctype) {
		this.acctype = acctype;
	}
	
	
}
-------------------------------------------------------------------------------------
AccServlet--
package org.servlets;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class AccServlet
 */
@WebServlet("/AccServlet")
public class AccServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AccServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		
		PrintWriter out=response.getWriter();
				
				response.setContentType("text/html");
				
			int accno=Integer.parseInt(request.getParameter("no"));
				
				String accname=request.getParameter("nm");
				
				String acctype=request.getParameter("ty");
				
				

				SessionFactory sf=new Configuration().configure().addAnnotatedClass(Account.class).buildSessionFactory();
					

					Session s=sf.openSession();
					
					
				
					s.beginTransaction();
					
					
				
					Account a=new Account();
			
			a.setAccno(accno);
			a.setAccname(accname);
			a.setAcctype(acctype);
				
					s.save(a);
					
					s.getTransaction().commit();
					sf.close();
				
					out.print("<h4>Record saved...</h4>");
			}

	

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
------------------------------------------------------------------------------------------------------------------
form.jsp--

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="AccServlet" method="get">
Account No <input type="number" name="no"><br>
 Account Name <input type="text" name="nm"><br>
Account Type <input type="text" name="ty"><br>
<input type="submit" value="Submit"><br>
</form>
</body>
</html>
-------------------------------------------------------------------------------------------------------------------------------------
cfg file

<?xml version="1.0" encoding="UTF-8"?>



<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
 
    <property name="hbm2ddl.auto">create</property> 
    
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
   
    </session-factory>
</hibernate-configuration>
=========================================================================================================================================================================
4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".
    Ans)
 
 
//hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property> 
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <property name="show_sql">true</property>
        <mapping resource="prod1.hbm.xml"/>
         <mapping resource="POJO.hbm.xml" />
    </session-factory>
</hibernate-configuration>

//POJO.java

package ASSIGNMENTS;

public class POJO {

	public int sno;
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public String usnm,pswd;

	public String getUsnm() {
		return usnm;
	}

	public void setUsnm(String usnm) {
		this.usnm = usnm;
	}

	public String getPswd() {
		return pswd;
	}

	public void setPswd(String pswd) {
		this.pswd = pswd;
	}
	
	
}
//POJO.hm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="ASSIGNMENTS.POJO" table="POJO">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="increment" />
        </id>
        <property name="usnm" type="java.lang.String">
            <column name="USNM" />
        </property>
        <property name="pswd" type="java.lang.String">
            <column name="PSWD" />
        </property>
    </class>
</hibernate-mapping>

//A.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv1">
USERNAME <input type="text" name="us">
PASSWORD <input type="password" name="pass">
<input type="submit" value="ENTER">
</form>
</body>
</html>

//SERVLET - 1

package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv1 extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	PrintWriter out = response.getWriter();
	
	String us = request.getParameter("us");
	
	String pa = request.getParameter("pass");
	SessionFactory sf = new Configuration().configure().buildSessionFactory();
	
	Session s = sf.openSession();
	
	s.beginTransaction();
	
	POJO p = new POJO();
	p.setSno(101);

	p.setUsnm(us);
	
	p.setPswd(pa);
	
	s.save(p);
	
	s.getTransaction().commit();
	
	s.close();
	
	sf.close();
	
	out.print("TABLE CREATED AND RECORD SUCCESSFULLY INSERTED...................");
	
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

//B.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="serv2">
ID <input type="text" name="id">
PASSWORD<input type="password" name="pass">
<input type="submit" value="SUBMIT">
</form>
</body>
</html>

//SERVLET - 2

package ASSIGNMENTS;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class serv2 extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		int sno = Integer.parseInt(request.getParameter("id"));		
		
		String pa = request.getParameter("pass");
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		POJO p = s.get(POJO.class, sno);

		p.setPswd(pa);
		
		s.update(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		out.print("PASSWORD UPDATED");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

   =========================================================================================================================================================================
5. Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record. 
Ans)
package demo1;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

public class Employee {
	
	
	
	private int Emp_id;
	private String Emp_name;
	private int Emp_salary;
	
	public Employee(int emp_id, String emp_name, int emp_salary) {
		super();
		Emp_id = emp_id;
		Emp_name = emp_name;
		Emp_salary = emp_salary;
	}
	
	

	public Employee() {
		super();
	}


	public int getEmp_id() {
		return Emp_id;
	}
	public void setEmp_id(int emp_id) {
		Emp_id = emp_id;
	}
	public String getEmp_name() {
		return Emp_name;
	}
	public void setEmp_name(String emp_name) {
		Emp_name = emp_name;
	}
	public int getEmp_salary() {
		return Emp_salary;
	}
	public void setEmp_salary(int emp_salary) {
		Emp_salary = emp_salary;
	}
	
	
	
	
	
	

}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package demo1;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class EmpTest {

	public static void main(String[] args) {

		 SessionFactory sf=new Configuration().configure().addAnnotatedClass(Employee.class).buildSessionFactory();
	        
	        Session s=sf.openSession();
	                
	      
			s.beginTransaction();
	      
			Employee e=new Employee();
			e.setEmp_id(102);
			e.setEmp_name("Neha");
			e.setEmp_salary(9000);
			
			s.save(e);
			
			s.update(e);
			
			s.delete(e);
	        
	      System.out.println("Records deleted");
	      s.getTransaction().commit();
	        s.close();
	        
	        sf.close();
	    
	    }

	}


-------------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <mapping resource="hibernate.hbm2.xml"></mapping>
    </session-factory>
</hibernate-configuration>
------------------------------------------------------------------------------------------------------------------------------------------------

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 19 Feb, 2021 10:15:35 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="demo1.Employee" table="EMPLOYEE">
        <id name="Emp_id" type="int">
            <column name="EMP_ID" />
            <generator class="assigned" />
        </id>
        <property name="Emp_name" type="java.lang.String">
            <column name="EMP_NAME" />
        </property>
        <property name="Emp_salary" type="int">
            <column name="EMP_SALARY" />
        </property>
    </class>
</hibernate-mapping>
=========================================================================================================================================================================

6. Create a Maven project in hibernate to perform CRUD Operations. Create a web Application.
=========================================================================================================================================================================

7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.
   Ans)
Bank interface
package a7;

public interface Bank {
	public String Name();
	public int Rate();
	

}
--------------------------------------------------------------------------------------
ICICI Bank--

package a7;

public class ICICI implements Bank {

	@Override
	public String Name() {
		// TODO Auto-generated method stub
		return "ICICI BANK";
	}

	@Override
	public int Rate() {
		// TODO Auto-generated method stub
		return 500;
	}

	

}
---------------------------------------------------------------------------------------------

IDBI Bank
package a7;

public class IDBI implements Bank{

	@Override
	public String Name() {
		// TODO Auto-generated method stub
		return "IDBI BANK";
	}

	@Override
	public int Rate() {
		// TODO Auto-generated method stub
		return 900;
	}

	

}
---------------------------------------------------------------------------------------------------

interface

package a7;

public interface InterestRate {
	
	public int getRate();

}
-------------------------------------------------------------------------------------------------------
class

package a7;

public class Rate implements InterestRate {

	@Override
	public int getRate() {
		// TODO Auto-generated method stub
		return 600;
	}

}
-----------------------------------------------------------------------------------------------------

SBI class

package a7;

import org.pro1.FortuneService;

public class SBI implements Bank {

	
	private InterestRate Is;

	
	
	
	public SBI(InterestRate is) {
		super();
		Is = is;
	}

	@Override
	public String Name() {
		// TODO Auto-generated method stub
		return "SBI BANK";
	}

	@Override
	public int Rate() {
		// TODO Auto-generated method stub
		
		return Is.getRate();
	}

	
	

}
-----------------------------------------------------------------------------------------------------------------------------------------------
testclass

package a7;

import org.pro.Car;
import org.pro1.Coach;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestBannk {

	public static void main(String[] args) {
	
				ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext3.xml");
				
			
			
				
		
				Bank b=context.getBean("mybank",Bank.class);
				
				
				
			System.out.println("Bank Name: "+b.Name());
				
		
			
			System.out.println("Bank Rate : "+b.Rate());
			
		
			
			
				
			context.close();
		

	}

}
--------------------------------------------------------------------------------------------------------------
applicationContext3.xml

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    
 
       <!--   <bean id="mybank" class="a7.SBI"></bean>     --> 
   
 
    
     <!-- Configure dependency here -->
    <bean id="InterestRate" class="a7.Rate"></bean>
    
    
      <!-- inject dependency here -->
      
      
    <bean id="mybank" class="a7.SBI">
    <constructor-arg ref="InterestRate"></constructor-arg>
    
    </bean>
    
   
    
     
   
</beans>
   =========================================================================================================================================================================

8. Create two bean classes as Student & Product. Make spring configuration file where configure the setter injection for the method which is saving the entered records 
   for the student as rollno,name,percentage in the database and do the same for products.
   ANS.  Student.java

      package Package1;

public class Student 
{

	public int rollno;
	
	public String name;
	
	public double percentage;
	
	public String i1;

	public Student(String i1) 
	
	{
		
		this.i1 = i1;
	}

	public int getRollno() {
		return rollno;
	}

	public void setRollno(int rollno) {
		this.rollno = rollno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getPercentage() {
		return percentage;
	}

	public void setPercentage(double percentage) {
		this.percentage = percentage;
	}
	
	public String mymethod()
	
	{
		return i1.rec();
	}
	
}
================================================================================

     Student1.java
     
     package Package1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class Student1 implements Details

{

	@Override
	public String rec() 
	
	{
		
        Scanner sc = new Scanner(System.in);
		
		try 
		
		{
			
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","jyotimunde");
		
		PreparedStatement pmt = cn.prepareStatement("insert into ASSI8 values(?,?,?)");
		
		System.out.println("ENTER ROLLNO OF THE STUDENT : ");
		int roll = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,roll );
		
		System.out.println("ENTER NAME OF THE STUDENT : ");
		String name= sc.nextLine();
		
		pmt.setString(2,name );
		
		System.out.println("ENTER PERCENTAGE OF THE STUDENT : ");
		double per = sc.nextDouble();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "RECORD INSERTED SUCCESSFULLY";
	}
	

	}
==============================================================================================

     Product.java
     
     package Package1;

public class Product 

{

	public int pid;
	
	public String name;
	
	public int price;
	
	public String i2;

	public Product(String i2) 
	
	{
		this.i2 = i2;
	}

	public int getPid() {
		return pid;
	}

	public void setPid(int pid) {
		this.pid = pid;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}
	
	public String mymethod2()
	{
		return i2.rec();
	}
	
}
========================================================================================

     Product1.java
     
     package Package1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class Product1 implements Details

{

	@Override
	public String rec() 
	
	{
		
        Scanner sc = new Scanner(System.in);
		
		try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","root");
		
		PreparedStatement pmt = cn.prepareStatement("insert into ASSI_8 values(?,?,?)");
		
		System.out.println("ENTER ID OF THE PRODUCT : ");
		int pid = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,pid );
		
		System.out.println("ENTER PRODUCT NAME : ");
		String nm= sc.nextLine();
		
		pmt.setString(2,nm );
		
		System.out.println("ENTER PRODUCT PRICE : ");
		int per = sc.nextInt();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "RECORD INSERTED SUCCESSFULLY";
	}
	
	}
=====================================================================================================

      Details.java (Interface)
      
      package Package1;

public interface Details 

{

	public String rec();
	
}
=======================================

    TestMain.java
    
    package Package1;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		    ClassP con = new ClassPathXmlApplicationContext("applicationContext.xml");
		    
		    Student s1 = con.getBean("s",Student.class);
		    
		    System.out.println(s1.mymethod());
		    
		    Product p1 = con.getBean("p",Product.class);
		    
		    System.out.println(p1.mymethod1());

			}

	}
========================================================================================================

     applicationContext.xml
     
     <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="st" class="Student2" />
    
    <bean id="pr" class="Product2" />
    
    <bean id="s" class="Student" >
    <property name="i1" ref="st" />
    </bean>
    
    <bean id="p" class="Product">
    <property name="i2" ref="pr" />
    </bean>

</beans>
   =========================================================================================================================================================================

9. Write a spring configuration file which injects the username, email and password to the Bean class User.
ANS. file1.java

     package Package1;

public class file1 

{
	
	public String username;
	
	public String email;
	
	public int password;
	
	public int i1;
	
	public int getI1() {
		return i1;
	}

	public void setI1(int i1) {
		this.i1 = i1;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public int getPassword() {
		return password;
	}

	public void setPassword(int password) {
		this.password = password;
	}

	public file1(String username, String email, int password) {
		super();
		this.username = username;
		this.email = email;
		this.password = password;
	}

	public file1() {
		super();
	}
	
	public String v1()
	
	{
	
		return i1.status();
		
	}
}
=======================================================================================================

   Store.java
   
   package Package1;

public class Store implements Interface

{

	@Override
	public String status() 
	
	{
		
		return "COMPLETED";
	}
	
	@Override
	public String getusername() 
	
	{
		
		return "VISHAL";
	}
	
	@Override
	public String getemail() 
	
	{
		
		return "josephine@Gmail.com";
	}
	
	@Override
	public String getpassword() 
	
	{
		
		return "jose123";
	}
}
=============================================================================================

    Interface.java
    
    package Package1;

public interface Interface 

{

	public String getusername;
	
	public String getemail;
	
	public int getpassword;
	
	public String status();
	
}
===================================================

    Test.java
    
    package Package1;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestFile {

	public static void main(String[] args) 
	
	{
		
		ClassPathXmlApplicationContext cs = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		file1 f1 = cs.getBean("f",file1.class);
		
		System.out.println(f1.getUsername());
		
		System.out.println(f1.getEmail());
		
		System.out.println(f1.getPassword());
		
		System.out.println(f1.status());
		
		cs.close();

		}
	
	}
	
=========================================================================================================================================================================

10. Write the configuration for 2 bean objects in the Spring Configuration file & Retrieve all the bean objects in the testApp using XmlBeanFactory.
ANS.  C1.java

      package Package1;

public class C1 

{

	public String v1;

	public String getV1() 
	{
		return v1;
	}

	public void setV1(String v1) 
	{
		this.v1 = v1;
	}
	
	public void getmsg()
	{
		v1.getmsg();
	}
	
}
===============================================================================================

     C2.java
     
     package Package1;

public class C2 

{

	public String v2;

	public String getV2() 
	{
		return v2;
	}

	public void setV2(String v2)
	{
		this.v2 = v2;
	}
	
	public void getmsg()
	{
		v2.getmsg();
	}
	
}
============================================================================================

    Class1.java
    
    package Package1;

public class Class1 implements Interface

{

	@Override
	public void getmsg() 
	
	{
		
		System.out.println("COMPLETED");
		
	}

	
	
}
===================================================================

    TestMain.java
    
    package Package1;

import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.ClassPathResource;

public class TestMain {

	public static void main(String[] args) 
	
	{
		
		XmlBeanFactory bf = new XmlBeanFactory(new ClassPathResource("ApplicationContext.xml"));
		
		C1 c1 = bf.getBean("C1",C1.class);
		
		c1.getmsg();
		
		C2 c2 = bf.getBean("C2",C2.class);
		
		c2.getmsg();
		
		System.out.println(c1);
		
		System.out.println(c2);

		

	}

}
================================================================================================

    Interface.java
    
    package Package1;

public interface Interface 

{

	public void getmsg();
	
}
=========================================================

    ApplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="class" class="Class1"  />
    
    <bean id="bean1" class="C1" >
    <property name="v1" ref="class" />
    </bean>
    
    <bean id="bean2" class ="C2" >
    <property name="v2" ref="class" />
    </bean>
=========================================================================================================================================================================

11. Make a Bean class which has a method which accepts firstname & lastname as parameters and returns the Fullname. Inject this bean class object into a Class Person
    Print the Details of a person as Fullname & age.
    Ans)
     
ANS. Pro1.java

     package Package1;

import java.util.Scanner;

public class Pro1 

{

	public String FirstName;
	
	public String LastName;
	
	Scanner sc;

	public String getFirstName() {
		return FirstName;
	}

	public void setFirstName(String firstName) {
		sc = new Scanner(System.in);
		System.out.println("ENTER FIRST NAME : ");
		String fm = sc.nextLine();
		this.FirstName = fm;
	}

	public String getLastName() {
		return LastName;
	}

	public void setLastName(String lastName) {
		sc = new Scanner(System.in);
		System.out.println("ENTER LAST NAME : ");
		String lm = sc.nextLine();
		this.LastName = lm;
	}
	
	
	
}
=================================================================================

    Class1.java
    
    package Package1;

public class Class1 

{

	public int age;

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
	
	FullName fn;
	
	public FullName getFn() {
		return fn;
	}

	public void setFn(FullName fn) {
		this.fn = fn;
	}

	public void setnames()
	{
		fn.setFnm();
		fn.setLnm();
	}
	
	public String getfname()
	{
		return fn.getFnm();
	}
	
	public String getlname()
	{
		return fn.getLnm();
	}
	
	
}
======================================================================================

    TestMain.java
    
    package Package1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS11.xml");
		
		Pro1 p = ac.getBean("p1",Pro1.class);
		
		p.setAge(18);
		
		System.out.println(p1.getAge());
		
		p.setnames();
		
		System.out.println("PERSON NAME : "+p.getfname()+" "+p.getlname());
		
	}

}
=============================================================================================================

    ApplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="i2" class="Class1" >
    </bean>
    
    <bean id="i1" class="Pro1" >
    <property name="fn"  ref="i2"></property>
    </bean>v
    =========================================================================================================================================================================

12. Create a spring Project in Maven. Make two bean classes (Annotated) ,In First Bean define a method which is displaying some message .Apply the Injection on this method.
     In second bean Apply the Constructor injection and a method in the bean is displaying fibbonacci series in it.
     =========================================================================================================================================================================

13. Create an interface as Person. Make two classes Student and Manager which are implementing the Person interface.In person interface there are two methods as
    getDetails() and showDetails(). Create a Bean class where Dependency injection should be applied on the field. Make a TestMain class where retrieve the details of 
    Student and manager.
    Ans)
person

package ass13;

public interface Person {
	
	public String getDetails();
	public String showDetails();

}
-----------------------------------------------------------
manager

package ass13;

public class Manager implements Person{


	@Override
	public String getDetails() {
		return "Rahul";
	}

	@Override
	public String showDetails() {
		return "Innovative";
	}
	
	

}
--------------------------------------------------------
student

package ass13;

public class Student implements Person {

	
	
	

	@Override
	public String getDetails() {
		// TODO Auto-generated method stub
		return "Suraj";
	}

	@Override
	public String showDetails() {
		// TODO Auto-generated method stub
		return "Dancer";
	}
	
	

}
----------------------------------------------------------
test

package ass13;


import javax.security.auth.login.Configuration;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args) {
		ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext2.xml");
		
		Person p=context.getBean("perobj",Person.class);
		
		System.out.println(" Name : "+p.getDetails());
		
		System.out.println(" Skills: "+p.showDetails());

		context.close();

	}

}
----------------------------------------------------------------------------------------------------------------------------------

application

<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">


<!-- <context:property-placeholder location="classpath:myprops.properties"/> -->

    <!-- Define your dependency  here -->

  <bean id="perobj" class="ass13.Student"></bean>
  

 
 
</beans>
    =========================================================================================================================================================================

14. Make a Spring MVC Project in Maven, Create a registration page where customer Id, firstname, lastname and age is to be taken in the registration form and save data 
    in the database .After submitting data , display the message "Registration Successful".
    =========================================================================================================================================================================

15  Make a program to apply constructor injection using XML and Annotation.
Ans)
   Stationery-
   package ass15;

public interface Stationery {
	
	public String getDetails();
	public String getyourFortune();
}
----------------------------------------------------------------------------------
pen---

package ass15;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component

public class Pen implements Stationery {

	public FortuneService fs;
	
	// Constructor injection using @Autowired
	
	
	@Autowired
	public Pen(FortuneService fs) {
		super();
		this.fs = fs;
	}
	
	
	@Override
	public String getDetails() {
		// TODO Auto-generated method stub
		return "Message from Pen";
	}



	@Override
	public String getyourFortune() {
		// TODO Auto-generated method stub
		return fs.getFortune();
	}
	
	

}
------------------------------------------------------------------------------
scale

package ass15;

import org.springframework.stereotype.Component;

@Component
public class Scale implements Stationery{

	@Override
	public String getDetails() {
		// TODO Auto-generated method stub
		return "Message from Scale";
	}

	@Override
	public String getyourFortune() {
		// TODO Auto-generated method stub
		return null;
	}

}
-----------------------------------------------------------------------------------
test

package ass15;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args) {

		ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");

	
		Stationery s=context.getBean("pen",Stationery.class);
	

		System.out.println(s.getDetails());
		
		System.out.println(s.getyourFortune());
		
		context.close();
		
	}

}
----------------------------------------------------------------------------------------------------------
fortuneservice--
package ass15;

public interface FortuneService {
	
	public String getFortune();

}
---------------------------------------------------------------------------------------
happyfortuneservice

package ass15;

import org.springframework.stereotype.Component;

@Component
public class HappyFortuneservice implements FortuneService{

	@Override
	public String getFortune() {
		// TODO Auto-generated method stub
		return "ts Your lucky day";
	}

}
-------------------------------------------------------------------------------------
appliction--

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    
 
    <!-- Spring will Scan all component classes in the package  org.Annotation-->
     <context:component-scan base-package="ass15"></context:component-scan>
</beans>
=========================================================================================================================================================================

16  Make a program to apply Setter injection using XML and Annotation.
Ans)
  Stationery-
   package ass15;

public interface Stationery {
	
	public String getDetails();
	public String getyourFortune();
}
----------------------------------------------------------------------------------
pen---

package ass15;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component

public class Pen implements Stationery {

	public FortuneService fs;
	
	// Setter injection using @Autowired
	
	
	@Autowired


	public void setFs(FortuneService fs) {
		this.fs = fs;
	}
	
	
	
	
	@Override
	public String getDetails() {
		// TODO Auto-generated method stub
		return "Message from Pen";
	}



	@Override
	public String getyourFortune() {
		// TODO Auto-generated method stub
		return fs.getFortune();
	}
	
	

}
------------------------------------------------------------------------------
scale

package ass15;

import org.springframework.stereotype.Component;

@Component
public class Scale implements Stationery{

	@Override
	public String getDetails() {
		// TODO Auto-generated method stub
		return "Message from Scale";
	}

	@Override
	public String getyourFortune() {
		// TODO Auto-generated method stub
		return null;
	}

}
-----------------------------------------------------------------------------------
test

package ass15;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args) {

		ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");

	
		Stationery s=context.getBean("pen",Stationery.class);
	

		System.out.println(s.getDetails());
		
		System.out.println(s.getyourFortune());
		
		context.close();
		
	}

}
----------------------------------------------------------------------------------------------------------
fortuneservice--
package ass15;

public interface FortuneService {
	
	public String getFortune();

}
---------------------------------------------------------------------------------------
happyfortuneservice

package ass15;

import org.springframework.stereotype.Component;

@Component
public class HappyFortuneservice implements FortuneService{

	@Override
	public String getFortune() {
		// TODO Auto-generated method stub
		return "ts Your lucky day";
	}

}
-------------------------------------------------------------------------------------
appliction--

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    
 
    <!-- Spring will Scan all component classes in the package  org.Annotation-->
     <context:component-scan base-package="ass15"></context:component-scan>
</beans>

=========================================================================================================================================================================

17  Create a Spring MVC form where two fields have to be taken as Username & Passord. Username & password can not be null & Password must be 8 characters long. If 
    Username is "admin" and password is "abcd" then a success.jsp should display the Message as "Welcome admin". If any errors are there in the fields then show the errors
    on the same page for the text fields.
    =========================================================================================================================================================================

18  Create bean class Student and access the functionality in the Student class without using any XML configuration file. Use Java code to define configuration.
=========================================================================================================================================================================

19. Create an advice which is printing the output on a pointcut method showMessage as following : 
     1234567891011        ( should come from advice1 )
     Welcome from method  ( Message from Bean Class method )
     ************         ( should come from advice2
     =========================================================================================================================================================================

20. Write a configuration class to inject a dependency of one bean class into another bean class using setter injection. BeanA and BeanB are the bean classes.
    BeanA has a method which accepts a number and returns the cube value of the number. Inject the BeanA into BeanB and BeanB has a method which accepts a number and
    returns the square value of the number. Print the Square and cube
    =========================================================================================================================================================================

21. Create a simple hibernate project without Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.
     Create a simple hibernate project without Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.
Ans)
    Users
    
    package Package1;

public class Users {
	public int userid;
	public String username;
	public String usercity;
	
	
	public Users() {
		super();
	}
	public Users(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}
	public int getUserid() {
		return userid;
	}
	public void setUserid(int userid) {
		this.userid = userid;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getUsercity() {
		return usercity;
	}
	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}
	
	
	

}
----------------------------------------------------------------------------------------------------------------------------------
Test

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class TestMain {

	public static void main(String[] args) {
	
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Users u1=new Users();
	
	
		u1.setUserid(101);
		System.out.println("USERID : 101");
		
		u1.setUsername("Tina");
		System.out.println("USERNAME : TINA");
		
		u1.setUsercity("Delhi");
		System.out.println("USERCITY : DELHI");
		

		s.save(u1);
		
		s.getTransaction().commit();
		s.close();
		sf.close();

	}

}
----------------------------------------------------------------------------------------------------------------------------------
hbm

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 11:56:04 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Users" table="USERDETAILS">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="usercity" type="java.lang.String">
            <column name="USERCITY" />
        </property>
    </class>
</hibernate-mapping>
-----------------------------------------------------------------------------------------------------------------------------------
cfg

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Users.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
    =========================================================================================================================================================================

22. Create a simple hibernate project with Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.
    Ans)
    Users
    
    package Package1;

public class Users {
	public int userid;
	public String username;
	public String usercity;
	
	
	public Users() {
		super();
	}
	public Users(int userid, String username, String usercity) {
		super();
		this.userid = userid;
		this.username = username;
		this.usercity = usercity;
	}
	public int getUserid() {
		return userid;
	}
	public void setUserid(int userid) {
		this.userid = userid;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getUsercity() {
		return usercity;
	}
	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}
	
	
	

}
----------------------------------------------------------------------------------------------------------------------------------
Test

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class TestMain {

	public static void main(String[] args) {
	
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Users u1=new Users();
	
	
		u1.setUserid(101);
		System.out.println("USERID : 101");
		
		u1.setUsername("Tina");
		System.out.println("USERNAME : TINA");
		
		u1.setUsercity("Delhi");
		System.out.println("USERCITY : DELHI");
		

		s.save(u1);
		
		s.getTransaction().commit();
		s.close();
		sf.close();

	}

}
----------------------------------------------------------------------------------------------------------------------------------
hbm

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 4 Mar, 2021 11:56:04 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Users" table="USERDETAILS">
        <id name="userid" type="int">
            <column name="USERID" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="usercity" type="java.lang.String">
            <column name="USERCITY" />
        </property>
    </class>
</hibernate-mapping>
-----------------------------------------------------------------------------------------------------------------------------------
cfg

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Users.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
pom file

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>demo</groupId>
  <artifactId>demo</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <dependencies>
 
  <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.4.28.Final</version>
</dependency>
 
  <!-- https://mvnrepository.com/artifact/com.oracle.ojdbc/ojdbc8 -->
<dependency>
    <groupId>com.oracle.ojdbc</groupId>
    <artifactId>ojdbc8</artifactId>
    <version>19.3.0.0</version>
</dependency>
 
  </dependencies>
</project>

    =========================================================================================================================================================================

23. Create a simple hibernate project without Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.
    Ans)
package package2;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "User1234")
public class User1 {
	
	@Id
	@Column(name ="Uid")
	public int userid;
	
	@Column(name ="Uname")
	public String username;
	
	@Column(name ="Ucity")
	public String usercity;

	public int getUserid() {
		return userid;
	}

	public void setUserid(int userid) {
		this.userid = userid;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getUsercity() {
		return usercity;
	}

	public void setUsercity(String usercity) {
		this.usercity = usercity;
	}

	public User1() {
		super();
	}
	
	
		

}
--------------------------------------------------------------------------------------------------

package package2;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;



public class TestApp {

	public static void main(String[] args) {
     SessionFactory sf=new Configuration().configure().addAnnotatedClass(User1.class).buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		
		
		User1 u1=new User1();
	
	
		u1.setUserid(101);
		System.out.println("USERID : 101");
		
		u1.setUsername("Tina");
		System.out.println("USERNAME : Tina");
		
		u1.setUsercity("Delhi");
		System.out.println("USERCITY : DELHI");
		

		s.save(u1);
		
		s.getTransaction().commit();
		s.close();
		sf.close();

	}

}
--------------------------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <!-- 
        <mapping resource="Users.hbm.xml"/>
         -->
    </session-factory>
</hibernate-configuration>
-----------------------------------------------------------------------------------------------------------------------------------------

package package2;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Emp {

	@Id
	private int id;
	private String name;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Emp() {
		super();
	}
	
	
}
    =========================================================================================================================================================================

24. Create a simple hibernate project with Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.
    =========================================================================================================================================================================

25. Create a dynamic hibernate project without Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Console.
=========================================================================================================================================================================

26. Create a dynamic hibernate project with Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Web Page.
    =========================================================================================================================================================================

27. Create a dynamic hibernate project with Maven to define a POJO class Users (with annotation). Take userid,username,city from user and print all details on the
    Web Page.
    =========================================================================================================================================================================

28. Make a Spring MVC project to enter the age of a student in the web page. After clicking on submit button Year of birth should be displayed on the web page.If the age
    entered is not a number then it should display the error message on the field.
    =========================================================================================================================================================================

29. Make a spring MVC project to take firstname, lastname and create a dropdown list of Countries. If selected country by the user is India then display a page showing 
    fullname of user with a message "Welcome to India". If selected country by the user is USA then display a page showing fullname of user with a message "Welcome to 
    USA".Firstname & Lastname field should not be empty. 
    =========================================================================================================================================================================

30. Create a JDBC project in spring to insert employee record like eid,ename,salary,city in the database table. Save 5 employee records and Display all records from the 
    table.
=========================================================================================================================================================================

 
